generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  deletedAt DateTime?

  @@index([courseId])
}

model Exam {
  id         String     @id @default(cuid())
  name       String
  date       DateTime
  totalMarks Int
  course     Course     @relation(fields: [courseId], references: [id])
  courseId   String
  examMarks  ExamMark[]
  createdAt  DateTime   @default(now())
  deletedAt  DateTime?

  @@index([courseId])
}

model ExamMark {
  id        String  @id @default(cuid())
  marks     Int
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  exam      Exam    @relation(fields: [examId], references: [id])
  examId    String

  @@index([studentId])
  @@index([examId])
}

model Notice {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  deletedAt DateTime?

  @@index([courseId])
}

model Course {
  id          String    @id @default(cuid())
  name        String
  description String
  class       String
  hsc         String
  fee         Decimal
  courseCode  String    @unique
  notes       Note[]
  students    Student[]
  exams       Exam[]
  notices     Notice[]
  deletedAt   DateTime?
}

model Student {
  id            String   @id @default(cuid())
  name          String
  rollNumber    String   @unique @db.VarChar(20)
  password      String
  email         String   @unique @db.VarChar(100)
  phoneNumber   String   @unique @db.VarChar(20)
  address       String
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      String
  examMarks     ExamMark[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  admittedBy    User     @relation("AdmittedByUser", fields: [admittedById], references: [id])
  admittedById  String
  updatedBy     User     @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById   String
  deletedAt     DateTime?

  @@index([courseId])
  @@index([admittedById])
  @@index([updatedById])
}

model User {
  id               String   @id @default(cuid())
  rollNumber       String   @unique
  password         String
  role             Role
  studentsAdmitted Student[] @relation("AdmittedByUser")
  studentsUpdated  Student[] @relation("UpdatedByUser")
  deletedAt        DateTime?
}

enum Role {
  STUDENT
  ADMIN
  SUPER
}
